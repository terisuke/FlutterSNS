rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{path=**}/postComments/{postCommentId} {
      allow read: if isAdmin();
    }
    match /users/{uid} {
      allow read: if isAuthenticated();
      allow update: if isAdmin();
      allow create, delete: if isTheSameUserOrAdmin(uid);
      match /userMutes/{activeUid} {
        //　作成と削除は受動的なユーザーのみが作成することができる
        allow create, delete: if isTheSameUserOrAdmin(activeUid);
      }
      match /followers/{followerUid} {
        allow create, delete: if isTheSameUserOrAdmin(followerUid);
      }
      match /posts/{postId} {
        allow read: if isAuthenticated();
        allow update: if isAdmin();
        allow create, delete: if isTheSameUserOrAdmin(uid);
        match /postLikes/{activeUid} {
          allow create, delete: if isTheSameUserOrAdmin(activeUid);
        }
        match /postComments/{postCommentId} {
          allow read, create: if isAuthenticated();
          // postCommentのdataのuidが現在ログインしている人と同じであれば消去できる
          allow delete: if isTheSameUserOrAdmin(request.resource.data.uid);
          match /postCommentLikes/{activeUid} {
            allow create, delete: if isTheSameUserOrAdmin(activeUid);
          }
          match /postCommentReplies/{postCommentReplyId} {
            allow read, create: if isAuthenticated();
            allow delete: if isTheSameUserOrAdmin(request.resource.data.uid);
            match /postCommentReplyLikes/{activeUid} {
              allow create, delete: if isTheSameUserOrAdmin(activeUid);
            }
          }
        }
      }
    }
  }
 
  function isAuthenticated() {
    return request.auth != null;
  }
  function isTheSameUserOrAdmin(uid) {
    return request.auth.uid == uid || isAdmin();
  }
  function isAdmin() {
    return request.auth.uid == "xxxxxxxxxxxxxx";
  }
  
}